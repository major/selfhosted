name: üîç Validate Manifests

on:
  pull_request:
    branches:
      - main
    paths:
      - 'apps/**'
      - 'clusters/**'
  push:
    branches:
      - main
    paths:
      - 'apps/**'
      - 'clusters/**'

jobs:
  validate-kubernetes:
    name: üß™ Validate Kubernetes Manifests
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üîß Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.31.0'

      - name: ‚úÖ Validate YAML syntax with kubectl
        run: |
          echo "üîç Validating Kubernetes manifests..."
          find apps/ clusters/ -name "*.yaml" -o -name "*.yml" | while read -r file; do
            echo "Checking $file"
            kubectl apply --dry-run=client -f "$file" || exit 1
          done

  validate-kustomize:
    name: üèóÔ∏è Validate Kustomize Builds
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üîß Setup kustomize
        uses: imranismail/setup-kustomize@v2
        with:
          kustomize-version: 'v5.4.2'

      - name: üèóÔ∏è Build kustomize overlays
        run: |
          echo "üîç Building all kustomizations..."

          # Build base applications
          if [ -d "apps/base" ]; then
            echo "Building apps/base..."
            kustomize build apps/base/ > /dev/null
          fi

          # Build bootstrap infrastructure
          if [ -d "apps/bootstrap-infra" ]; then
            echo "Building apps/bootstrap-infra..."
            find apps/bootstrap-infra -name "kustomization.yaml" -exec dirname {} \; | while read -r dir; do
              echo "Building $dir..."
              kustomize build "$dir" > /dev/null
            done
          fi

          # Build infrastructure
          if [ -d "apps/infra" ]; then
            echo "Building apps/infra..."
            find apps/infra -name "kustomization.yaml" -exec dirname {} \; | while read -r dir; do
              echo "Building $dir..."
              kustomize build "$dir" > /dev/null
            done
          fi

          # Build cluster configs
          if [ -d "clusters/selfhosted" ]; then
            echo "Building clusters/selfhosted..."
            kustomize build clusters/selfhosted/ > /dev/null
          fi

          echo "‚úÖ All kustomizations built successfully!"

  verify-image-hashes:
    name: üîê Verify Container Image SHA256 Hashes
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üîß Install skopeo
        run: |
          sudo apt-get update
          sudo apt-get install -y skopeo

      - name: üîê Extract and verify image hashes
        run: |
          echo "üîç Extracting images with SHA256 hashes from manifests..."

          # Find all images with SHA256 hashes
          images=$(grep -r "image:.*@sha256:" apps/ clusters/ 2>/dev/null | grep -v "Binary file" | sed 's/.*image:[[:space:]]*//g' | sed 's/[[:space:]]*$//g' | sort -u || true)

          if [ -z "$images" ]; then
            echo "‚ÑπÔ∏è No images with SHA256 hashes found"
            exit 0
          fi

          echo "Found images to verify:"
          echo "$images"
          echo ""

          # Verify each image hash
          failed=0
          while IFS= read -r image; do
            if [ -z "$image" ]; then
              continue
            fi

            echo "üîç Verifying: $image"

            # Extract the image reference and hash
            image_ref=$(echo "$image" | cut -d@ -f1)
            expected_hash=$(echo "$image" | cut -d@ -f2)

            # Get the actual digest from the registry
            actual_digest=$(skopeo inspect "docker://$image_ref" 2>/dev/null | jq -r '.Digest' || echo "")

            if [ -z "$actual_digest" ]; then
              echo "‚ùå Failed to inspect image: $image_ref"
              failed=1
              continue
            fi

            # Compare hashes
            if [ "$actual_digest" = "$expected_hash" ]; then
              echo "‚úÖ Hash verified for $image_ref"
            else
              echo "‚ùå Hash mismatch for $image_ref"
              echo "   Expected: $expected_hash"
              echo "   Actual:   $actual_digest"
              failed=1
            fi
            echo ""
          done <<< "$images"

          if [ $failed -eq 1 ]; then
            echo "‚ùå Some image hash verifications failed"
            exit 1
          fi

          echo "‚úÖ All image hashes verified successfully!"

  validate-flux:
    name: üåä Validate Flux Resources
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üîß Setup Flux CLI
        uses: fluxcd/flux2/action@main

      - name: üåä Validate Flux kustomizations
        run: |
          echo "üîç Validating Flux resources..."

          # Validate bootstrap infrastructure
          if [ -d "apps/bootstrap-infra" ]; then
            echo "Validating apps/bootstrap-infra..."
            flux build kustomization bootstrap-infra --path apps/bootstrap-infra --kustomization-file clusters/selfhosted/bootstrap.yaml
          fi

          # Validate infrastructure
          if [ -d "apps/infra" ]; then
            echo "Validating apps/infra..."
            flux build kustomization infra --path apps/infra --kustomization-file clusters/selfhosted/infra.yaml
          fi

          # Validate applications
          if [ -d "apps/base" ]; then
            echo "Validating apps/base..."
            flux build kustomization apps --path apps/base --kustomization-file clusters/selfhosted/apps.yaml
          fi

          echo "‚úÖ All Flux resources validated successfully!"

  scan-images:
    name: üõ°Ô∏è Security Scan Container Images
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üîß Install trivy
        run: |
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy

      - name: üõ°Ô∏è Scan images for vulnerabilities
        run: |
          echo "üîç Extracting all container images from manifests..."

          # Extract all images (with or without SHA256)
          images=$(grep -r "image:" apps/ clusters/ 2>/dev/null | grep -v "Binary file" | sed 's/.*image:[[:space:]]*//g' | sed 's/[[:space:]]*$//g' | grep -v "^$" | sort -u || true)

          if [ -z "$images" ]; then
            echo "‚ÑπÔ∏è No images found to scan"
            exit 0
          fi

          echo "Found images to scan:"
          echo "$images"
          echo ""

          # Scan each image
          failed=0
          while IFS= read -r image; do
            if [ -z "$image" ]; then
              continue
            fi

            echo "üîç Scanning: $image"

            # Run trivy scan (fail on HIGH and CRITICAL vulnerabilities)
            if trivy image --severity HIGH,CRITICAL --exit-code 0 "$image"; then
              echo "‚úÖ Scan completed for $image"
            else
              echo "‚ö†Ô∏è Vulnerabilities found in $image (non-blocking)"
            fi
            echo ""
          done <<< "$images"

          echo "‚úÖ Security scanning completed!"
          echo "‚ÑπÔ∏è Note: This job reports vulnerabilities but does not fail the build"

  summary:
    name: ‚úÖ Validation Summary
    runs-on: ubuntu-latest
    needs: [validate-kubernetes, validate-kustomize, verify-image-hashes, validate-flux, scan-images]
    if: always()
    steps:
      - name: üìä Check validation results
        run: |
          echo "üìä Validation Results:"
          echo "====================="
          echo "Kubernetes validation: ${{ needs.validate-kubernetes.result }}"
          echo "Kustomize validation: ${{ needs.validate-kustomize.result }}"
          echo "Image hash verification: ${{ needs.verify-image-hashes.result }}"
          echo "Flux validation: ${{ needs.validate-flux.result }}"
          echo "Security scanning: ${{ needs.scan-images.result }}"

          if [ "${{ needs.validate-kubernetes.result }}" != "success" ] || \
             [ "${{ needs.validate-kustomize.result }}" != "success" ] || \
             [ "${{ needs.verify-image-hashes.result }}" != "success" ] || \
             [ "${{ needs.validate-flux.result }}" != "success" ]; then
            echo ""
            echo "‚ùå Some validations failed!"
            exit 1
          fi

          echo ""
          echo "‚úÖ All validations passed!"
